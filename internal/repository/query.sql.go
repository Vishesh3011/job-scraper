// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
	"encoding/json"
)

const checkUserExistsByEmail = `-- name: CheckUserExistsByEmail :one
SELECT EXISTS(SELECT 1 FROM job_scraper_users WHERE email = ?) AS ` + "`" + `exists` + "`" + `
`

func (q *Queries) CheckUserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO job_scraper_users (name, email, location, keywords, cookie, csrf_token)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Name      string
	Email     string
	Location  json.RawMessage
	Keywords  json.RawMessage
	Cookie    sql.NullString
	CsrfToken sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Location,
		arg.Keywords,
		arg.Cookie,
		arg.CsrfToken,
	)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email, location, keywords, cookie, csrf_token, created_at FROM job_scraper_users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]JobScraperUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobScraperUser
	for rows.Next() {
		var i JobScraperUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Location,
			&i.Keywords,
			&i.Cookie,
			&i.CsrfToken,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, location, keywords, cookie, csrf_token, created_at FROM job_scraper_users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (JobScraperUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i JobScraperUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Location,
		&i.Keywords,
		&i.Cookie,
		&i.CsrfToken,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE job_scraper_users
SET name = ?, location = ?, keywords = ?, cookie = ?, csrf_token = ?
WHERE email = ?
`

type UpdateUserParams struct {
	Name      string
	Location  json.RawMessage
	Keywords  json.RawMessage
	Cookie    sql.NullString
	CsrfToken sql.NullString
	Email     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Location,
		arg.Keywords,
		arg.Cookie,
		arg.CsrfToken,
		arg.Email,
	)
	return err
}
